# We do not allow .f/.F sources
.SUFFIXES:
.SUFFIXES: .f90 .F90 .c .o .a .so

# Default compiler options
# I am a bit split whether we should make a "default"
# file for each vendor and pass variables to
# a common variable space, then subsequently grabbing
# those needed.

CFLAGS ?= 
CXXFLAGS ?=
FCFLAGS ?=

# Default linker flags
AR ?= ar
ARFLAGS ?= -ru
RANLIB ?= ranlib

# Default pre-processor commands
# (probably we should do a check to ensure
#  it works)
CPP = cpp -E -P -C -nostdinc

# Only in the case of no fPIC should we not add it
ifndef NO_PIC
 CFLAGS += -fPIC
 CXXFLAGS += -fPIC
 FCFLAGS += -fPIC
endif

# Default vendor setting
VENDOR ?= gnu

CC_VENDOR ?= $(VENDOR)
CXX_VENDOR ?= $(VENDOR)
FC_VENDOR ?= $(VENDOR)

# Automatically decide on a single OPT flag
# Instead of having "override" everywhere
# we rely on a temporary variable
_OPT = none
ifdef OPT
_OPT := $(OPT)
endif

# First perform wrap-arounds
ifeq ($(_OPT), -1)
  _OPT = debug
endif
ifeq ($(_OPT), DEBUG)
  _OPT = debug
endif
ifeq ($(_OPT), 0)
  _OPT = none
endif
ifeq ($(_OPT), NONE)
  _OPT = none
endif
ifeq ($(_OPT), 1)
  _OPT = weak
endif
ifeq ($(_OPT), WEAK)
  _OPT = weak
endif
ifeq ($(_OPT), 2)
  _OPT = medium
endif
ifeq ($(_OPT), MEDIUM)
  _OPT = medium
endif
ifeq ($(_OPT), 3)
  _OPT = hard
endif
ifeq ($(_OPT), HARD)
  _OPT = hard
endif
override OPT := $(_OPT)

# All opt-flags that we process to filter out
_FILTER_OPT_FLAGS = -Ofast -Os -O0 -O1 -O2 -O3 -fast

ifneq ($(OPT),none)

  # Filter out all the optimizations as they will be
  # re-inserted below
  CFLAGS := $(filter-out $(_FILTER_OPT_FLAGS),$(CFLAGS))
  CXXFLAGS := $(filter-out $(_FILTER_OPT_FLAGS),$(CXXFLAGS))
  FCFLAGS := $(filter-out $(_FILTER_OPT_FLAGS),$(FCFLAGS))

  # Populate them
  include $(TOP_DIR)/vendor/$(CC_VENDOR).make
  CFLAGS += $(V_CFLAGS_$(OPT))

  include $(TOP_DIR)/vendor/$(CXX_VENDOR).make
  CXXFLAGS += $(V_CXXFLAGS_$(OPT))

  include $(TOP_DIR)/vendor/$(FC_VENDOR).make
  FCFLAGS += $(V_FCFLAGS_$(OPT))

else

  # We simply default to include the vendor make file for fortran
  # to retrieve the FC_MODDIR variable
  include $(TOP_DIR)/vendor/$(FC_VENDOR).make

endif


# Define the object-oriented programming for
# the buds
ifeq ($(OO),0)
  PPFLAGS += -DBUD_FORTRAN=1995
endif
ifeq ($(OO),no)
  PPFLAGS += -DBUD_FORTRAN=1995
endif


# Generic compiler options
CC := $(V_CC)
CXX := $(V_CXX)
FC := $(V_FC)
MPICC := $(V_MPICC)
MPICXX := $(V_MPICXX)
MPIFC := $(V_MPIFC)

# Simple conversion from YES/yes/true/TRUE to 1
ifeq ($(MPI), yes)
 override MPI = 1
endif
ifeq ($(MPI), YES)
 override MPI = 1
endif
ifeq ($(MPI), true)
 override MPI = 1
endif
ifeq ($(MPI), TRUE)
 override MPI = 1
endif

# Add to includes the mod directory
INC += $(V_FC_MODDIR)$(BUDS_MODDIR)

# Add the definitions
FPPFLAGS += $(PPFLAGS)
CPPFLAGS += $(PPFLAGS)


# Define the compilation options:
.F90.o:
	$(FC) -c -o $@ $(FCFLAGS) $(INC) $(FPPFLAGS) $<
.f90.o:
	$(FC) -c -o $@ $(FCFLAGS) $(INC) $<
.c.o:
	$(CC) -c -o $@ $(CFLAGS) $(INC) $(CPPFLAGS) $<
.cpp.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(INC) $(CPPFLAGS) $<


.PHONY: show
.NOTPARALLEL: show
show:
	@echo ""
	@echo "Used compilation options (VENDOR=$(VENDOR)):"
	@echo "  CC = $(CC)"
	@echo "  CFLAGS = $(CFLAGS)"
	@echo "  CPPFLAGS = $(CPPFLAGS)"
	@echo "  CXX = $(CXX)"
	@echo "  CXXFLAGS = $(CXXFLAGS)"
	@echo "  FC = $(FC)"
	@echo "  FCFLAGS = $(FCFLAGS)"
	@echo "  FPPFLAGS = $(FPPFLAGS)"
	@echo "Linker (shared)"
	@echo "  $(CC) -shared $(CFLAGS) $(LDFLAGS)"
ifeq ($(MPI),1)
	@echo ""
	@echo "Used MPI compilation options:"
	@echo "  MPICC = $(MPICC)"
	@echo "  CFLAGS = $(CFLAGS)"
	@echo "  MPICXX = $(MPICXX)"
	@echo "  CXXFLAGS = $(CXXFLAGS)"
	@echo "  MPIFC = $(MPIFC)"
	@echo "  FCFLAGS = $(FCFLAGS)"
endif
	@echo ""
	@echo "Installation prefixes:"
	@echo "  PREFIX = $(PREFIX)"


# Local Variables:
#  mode: makefile-gmake
# End:
